/*
 * MIS.Back
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ApiProject.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class IcdRootsReportRecordModel : IEquatable<IcdRootsReportRecordModel>
    {
        /// <summary>
        /// Gets or Sets PatientName
        /// </summary>

        [DataMember(Name = "patientName")]
        public string PatientName { get; set; }

        /// <summary>
        /// Gets or Sets PatientBirthdate
        /// </summary>

        [DataMember(Name = "patientBirthdate")]
        public DateTime? PatientBirthdate { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>

        [DataMember(Name = "gender")]
        public Gender Gender { get; set; }

        /// <summary>
        /// Gets or Sets VisitsByRoot
        /// </summary>

        [DataMember(Name = "visitsByRoot")]
        public Dictionary<string, int?> VisitsByRoot { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IcdRootsReportRecordModel {\n");
            sb.Append("  PatientName: ").Append(PatientName).Append("\n");
            sb.Append("  PatientBirthdate: ").Append(PatientBirthdate).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  VisitsByRoot: ").Append(VisitsByRoot).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IcdRootsReportRecordModel)obj);
        }

        /// <summary>
        /// Returns true if IcdRootsReportRecordModel instances are equal
        /// </summary>
        /// <param name="other">Instance of IcdRootsReportRecordModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IcdRootsReportRecordModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    PatientName == other.PatientName ||
                    PatientName != null &&
                    PatientName.Equals(other.PatientName)
                ) &&
                (
                    PatientBirthdate == other.PatientBirthdate ||
                    PatientBirthdate != null &&
                    PatientBirthdate.Equals(other.PatientBirthdate)
                ) &&
                (
                    Gender == other.Gender ||
                    Gender != null &&
                    Gender.Equals(other.Gender)
                ) &&
                (
                    VisitsByRoot == other.VisitsByRoot ||
                    VisitsByRoot != null &&
                    VisitsByRoot.SequenceEqual(other.VisitsByRoot)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (PatientName != null)
                    hashCode = hashCode * 59 + PatientName.GetHashCode();
                if (PatientBirthdate != null)
                    hashCode = hashCode * 59 + PatientBirthdate.GetHashCode();
                if (Gender != null)
                    hashCode = hashCode * 59 + Gender.GetHashCode();
                if (VisitsByRoot != null)
                    hashCode = hashCode * 59 + VisitsByRoot.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(IcdRootsReportRecordModel left, IcdRootsReportRecordModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IcdRootsReportRecordModel left, IcdRootsReportRecordModel right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

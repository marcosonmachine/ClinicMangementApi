/*
 * MIS.Back
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations.Schema;

namespace ApiProject.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InspectionModel : IEquatable<InspectionModel>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]

        [DataMember(Name = "id")]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets CreateTime
        /// </summary>
        [Required]

        [DataMember(Name = "createTime")]
        public DateTime? CreateTime { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>

        [DataMember(Name = "date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets Anamnesis
        /// </summary>

        [DataMember(Name = "anamnesis")]
        public string Anamnesis { get; set; }

        /// <summary>
        /// Gets or Sets Complaints
        /// </summary>

        [DataMember(Name = "complaints")]
        public string Complaints { get; set; }

        /// <summary>
        /// Gets or Sets Treatment
        /// </summary>

        [DataMember(Name = "treatment")]
        public string Treatment { get; set; }

        /// <summary>
        /// Gets or Sets Conclusion
        /// </summary>

        [DataMember(Name = "conclusion")]
        public Conclusion Conclusion { get; set; }

        /// <summary>
        /// Gets or Sets NextVisitDate
        /// </summary>

        [DataMember(Name = "nextVisitDate")]
        public DateTime? NextVisitDate { get; set; }

        /// <summary>
        /// Gets or Sets DeathDate
        /// </summary>

        [DataMember(Name = "deathDate")]
        public DateTime? DeathDate { get; set; }

        /// <summary>
        /// Gets or Sets BaseInspectionId
        /// </summary>

        [DataMember(Name = "baseInspectionId")]
        public Guid? BaseInspectionId { get; set; }
        [ForeignKey("BaseInspectionId")]
        public InspectionModel? BaseInspection { get; set; }

        /// <summary>
        /// Gets or Sets PreviousInspectionId
        /// </summary>

        [DataMember(Name = "previousInspectionId")]
        public Guid? PreviousInspectionId { get; set; }
        [ForeignKey("PreviousInspectionId")]
        public InspectionModel? PreviousInspection { get; set; }

        /// <summary>
        /// Gets or Sets Patient
        /// </summary>

        [DataMember(Name = "patient")]
        [ForeignKey("PatientId")]
        public PatientModel Patient { get; set; } = null!;
        public Guid PatientId { get; set; }

        /// <summary>
        /// Gets or Sets Doctor
        /// </summary>

        [DataMember(Name = "doctor")]
        [ForeignKey("DoctorId")]
        public DoctorModel Doctor { get; set; }
        public Guid DoctorId { get; set; }

        /// <summary>
        /// Gets or Sets Diagnoses
        /// </summary>

        [DataMember(Name = "diagnoses")]
        public List<DiagnosisModel> Diagnoses { get; set; }

        /// <summary>
        /// Gets or Sets Consultations
        /// </summary>

        [DataMember(Name = "consultations")]
        public List<InspectionConsultationModel> Consultations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InspectionModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Anamnesis: ").Append(Anamnesis).Append("\n");
            sb.Append("  Complaints: ").Append(Complaints).Append("\n");
            sb.Append("  Treatment: ").Append(Treatment).Append("\n");
            sb.Append("  Conclusion: ").Append(Conclusion).Append("\n");
            sb.Append("  NextVisitDate: ").Append(NextVisitDate).Append("\n");
            sb.Append("  DeathDate: ").Append(DeathDate).Append("\n");
            sb.Append("  BaseInspectionId: ").Append(BaseInspectionId).Append("\n");
            sb.Append("  PreviousInspectionId: ").Append(PreviousInspectionId).Append("\n");
            // sb.Append("  Patient: ").Append(Patient).Append("\n");
            sb.Append("  Doctor: ").Append(Doctor).Append("\n");
            sb.Append("  Diagnoses: ").Append(Diagnoses).Append("\n");
            sb.Append("  Consultations: ").Append(Consultations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InspectionModel)obj);
        }

        /// <summary>
        /// Returns true if InspectionModel instances are equal
        /// </summary>
        /// <param name="other">Instance of InspectionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InspectionModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    CreateTime == other.CreateTime ||
                    CreateTime != null &&
                    CreateTime.Equals(other.CreateTime)
                ) &&
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) &&
                (
                    Anamnesis == other.Anamnesis ||
                    Anamnesis != null &&
                    Anamnesis.Equals(other.Anamnesis)
                ) &&
                (
                    Complaints == other.Complaints ||
                    Complaints != null &&
                    Complaints.Equals(other.Complaints)
                ) &&
                (
                    Treatment == other.Treatment ||
                    Treatment != null &&
                    Treatment.Equals(other.Treatment)
                ) &&
                (
                    Conclusion == other.Conclusion ||
                    Conclusion != null &&
                    Conclusion.Equals(other.Conclusion)
                ) &&
                (
                    NextVisitDate == other.NextVisitDate ||
                    NextVisitDate != null &&
                    NextVisitDate.Equals(other.NextVisitDate)
                ) &&
                (
                    DeathDate == other.DeathDate ||
                    DeathDate != null &&
                    DeathDate.Equals(other.DeathDate)
                ) &&
                (
                    BaseInspectionId == other.BaseInspectionId ||
                    BaseInspectionId != null &&
                    BaseInspectionId.Equals(other.BaseInspectionId)
                ) &&
                (
                    PreviousInspectionId == other.PreviousInspectionId ||
                    PreviousInspectionId != null &&
                    PreviousInspectionId.Equals(other.PreviousInspectionId)
                ) &&
                // (
                //     Patient == other.Patient ||
                //     Patient != null &&
                //     Patient.Equals(other.Patient)
                // ) &&
                (
                    Doctor == other.Doctor ||
                    Doctor != null &&
                    Doctor.Equals(other.Doctor)
                ) &&
                (
                    Diagnoses == other.Diagnoses ||
                    Diagnoses != null &&
                    Diagnoses.SequenceEqual(other.Diagnoses)
                ) &&
                (
                    Consultations == other.Consultations ||
                    Consultations != null &&
                    Consultations.SequenceEqual(other.Consultations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (CreateTime != null)
                    hashCode = hashCode * 59 + CreateTime.GetHashCode();
                if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                if (Anamnesis != null)
                    hashCode = hashCode * 59 + Anamnesis.GetHashCode();
                if (Complaints != null)
                    hashCode = hashCode * 59 + Complaints.GetHashCode();
                if (Treatment != null)
                    hashCode = hashCode * 59 + Treatment.GetHashCode();
                if (Conclusion != null)
                    hashCode = hashCode * 59 + Conclusion.GetHashCode();
                if (NextVisitDate != null)
                    hashCode = hashCode * 59 + NextVisitDate.GetHashCode();
                if (DeathDate != null)
                    hashCode = hashCode * 59 + DeathDate.GetHashCode();
                if (BaseInspectionId != null)
                    hashCode = hashCode * 59 + BaseInspectionId.GetHashCode();
                if (PreviousInspectionId != null)
                    hashCode = hashCode * 59 + PreviousInspectionId.GetHashCode();
                // if (Patient != null)
                //     hashCode = hashCode * 59 + Patient.GetHashCode();
                if (Doctor != null)
                    hashCode = hashCode * 59 + Doctor.GetHashCode();
                if (Diagnoses != null)
                    hashCode = hashCode * 59 + Diagnoses.GetHashCode();
                if (Consultations != null)
                    hashCode = hashCode * 59 + Consultations.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(InspectionModel left, InspectionModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InspectionModel left, InspectionModel right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * MIS.Back
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ApiProject.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InspectionEditModel : IEquatable<InspectionEditModel>
    {
        /// <summary>
        /// Gets or Sets Anamnesis
        /// </summary>

        [MaxLength(5000)]
        [DataMember(Name = "anamnesis")]
        public string Anamnesis { get; set; }

        /// <summary>
        /// Gets or Sets Complaints
        /// </summary>
        [Required]

        [StringLength(5000, MinimumLength = 1)]
        [DataMember(Name = "complaints")]
        public string Complaints { get; set; }

        /// <summary>
        /// Gets or Sets Treatment
        /// </summary>
        [Required]

        [StringLength(5000, MinimumLength = 1)]
        [DataMember(Name = "treatment")]
        public string Treatment { get; set; }

        /// <summary>
        /// Gets or Sets Conclusion
        /// </summary>
        [Required]

        [DataMember(Name = "conclusion")]
        public Conclusion Conclusion { get; set; }

        /// <summary>
        /// Date and time of the next visit in case of Disease conclusion (UTC)
        /// </summary>
        /// <value>Date and time of the next visit in case of Disease conclusion (UTC)</value>

        [DataMember(Name = "nextVisitDate")]
        public DateTime? NextVisitDate { get; set; }

        /// <summary>
        /// Date and time of the death in case of Death conclusion (UTC)
        /// </summary>
        /// <value>Date and time of the death in case of Death conclusion (UTC)</value>

        [DataMember(Name = "deathDate")]
        public DateTime? DeathDate { get; set; }

        /// <summary>
        /// Gets or Sets Diagnoses
        /// </summary>
        [Required]

        [DataMember(Name = "diagnoses")]
        public List<DiagnosisCreateModel> Diagnoses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InspectionEditModel {\n");
            sb.Append("  Anamnesis: ").Append(Anamnesis).Append("\n");
            sb.Append("  Complaints: ").Append(Complaints).Append("\n");
            sb.Append("  Treatment: ").Append(Treatment).Append("\n");
            sb.Append("  Conclusion: ").Append(Conclusion).Append("\n");
            sb.Append("  NextVisitDate: ").Append(NextVisitDate).Append("\n");
            sb.Append("  DeathDate: ").Append(DeathDate).Append("\n");
            sb.Append("  Diagnoses: ").Append(Diagnoses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InspectionEditModel)obj);
        }

        /// <summary>
        /// Returns true if InspectionEditModel instances are equal
        /// </summary>
        /// <param name="other">Instance of InspectionEditModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InspectionEditModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Anamnesis == other.Anamnesis ||
                    Anamnesis != null &&
                    Anamnesis.Equals(other.Anamnesis)
                ) &&
                (
                    Complaints == other.Complaints ||
                    Complaints != null &&
                    Complaints.Equals(other.Complaints)
                ) &&
                (
                    Treatment == other.Treatment ||
                    Treatment != null &&
                    Treatment.Equals(other.Treatment)
                ) &&
                (
                    Conclusion == other.Conclusion ||
                    Conclusion != null &&
                    Conclusion.Equals(other.Conclusion)
                ) &&
                (
                    NextVisitDate == other.NextVisitDate ||
                    NextVisitDate != null &&
                    NextVisitDate.Equals(other.NextVisitDate)
                ) &&
                (
                    DeathDate == other.DeathDate ||
                    DeathDate != null &&
                    DeathDate.Equals(other.DeathDate)
                ) &&
                (
                    Diagnoses == other.Diagnoses ||
                    Diagnoses != null &&
                    Diagnoses.SequenceEqual(other.Diagnoses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Anamnesis != null)
                    hashCode = hashCode * 59 + Anamnesis.GetHashCode();
                if (Complaints != null)
                    hashCode = hashCode * 59 + Complaints.GetHashCode();
                if (Treatment != null)
                    hashCode = hashCode * 59 + Treatment.GetHashCode();
                if (Conclusion != null)
                    hashCode = hashCode * 59 + Conclusion.GetHashCode();
                if (NextVisitDate != null)
                    hashCode = hashCode * 59 + NextVisitDate.GetHashCode();
                if (DeathDate != null)
                    hashCode = hashCode * 59 + DeathDate.GetHashCode();
                if (Diagnoses != null)
                    hashCode = hashCode * 59 + Diagnoses.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(InspectionEditModel left, InspectionEditModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InspectionEditModel left, InspectionEditModel right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

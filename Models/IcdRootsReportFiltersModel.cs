/*
 * MIS.Back
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ApiProject.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class IcdRootsReportFiltersModel : IEquatable<IcdRootsReportFiltersModel>
    {
        /// <summary>
        /// Gets or Sets Start
        /// </summary>

        [DataMember(Name = "start")]
        public DateTime? Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>

        [DataMember(Name = "end")]
        public DateTime? End { get; set; }

        /// <summary>
        /// Gets or Sets IcdRoots
        /// </summary>

        [DataMember(Name = "icdRoots")]
        public List<string> IcdRoots { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IcdRootsReportFiltersModel {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  IcdRoots: ").Append(IcdRoots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IcdRootsReportFiltersModel)obj);
        }

        /// <summary>
        /// Returns true if IcdRootsReportFiltersModel instances are equal
        /// </summary>
        /// <param name="other">Instance of IcdRootsReportFiltersModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IcdRootsReportFiltersModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Start == other.Start ||
                    Start != null &&
                    Start.Equals(other.Start)
                ) &&
                (
                    End == other.End ||
                    End != null &&
                    End.Equals(other.End)
                ) &&
                (
                    IcdRoots == other.IcdRoots ||
                    IcdRoots != null &&
                    IcdRoots.SequenceEqual(other.IcdRoots)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Start != null)
                    hashCode = hashCode * 59 + Start.GetHashCode();
                if (End != null)
                    hashCode = hashCode * 59 + End.GetHashCode();
                if (IcdRoots != null)
                    hashCode = hashCode * 59 + IcdRoots.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(IcdRootsReportFiltersModel left, IcdRootsReportFiltersModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IcdRootsReportFiltersModel left, IcdRootsReportFiltersModel right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

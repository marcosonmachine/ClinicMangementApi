/*
 * MIS.Back
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using ApiProject.Attributes;
using ApiProject.Security;
using Microsoft.AspNetCore.Authorization;
using ApiProject.Models;
using ApiProject.Services;

namespace ApiProject.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class InspectionApiController(InspectionService inspectionService) : ControllerBase
    {
        /// <summary>
        /// Get medical inspection chain for root inspection
        /// </summary>
        /// <param name="id">Root inspection&#x27;s identifier</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">InternalServerError</response>
        [HttpGet]
        [Route("/api/inspection/{id}/chain")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiInspectionIdChainGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<InspectionPreviewModel>), description: "Success")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiInspectionIdChainGet([FromRoute][Required] Guid id)
        {
            try {
            List<InspectionPreviewModel> imp = await inspectionService.FindByBaseInspection(id);
            return Ok(imp);
            }
            catch (Exception e)
            {
                return StatusCode(500, "Server at fault");
            }
        }

        /// <summary>
        /// Get full information about specified inspection
        /// </summary>
        /// <param name="id">Inspection&#x27;s identifier</param>
        /// <response code="200">Inspection found and successfully extracted</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">InternalServerError</response>
        [HttpGet]
        [Route("/api/inspection/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiInspectionIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InspectionModel), description: "Inspection found and successfully extracted")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiInspectionIdGet([FromRoute][Required] Guid id)
        {
            try
            {
                var inspection = await inspectionService.GetInspectionbyId(id);
                return Ok(inspection);
            }
            catch (Exception e)
            {
                return StatusCode(500, "Server at fault");
            }
        }

        /// <summary>
        /// Edit concrete inspection
        /// </summary>
        /// <param name="id">Inspection&#x27;s identifier</param>
        /// <param name="body">Inspection model</param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid arguments</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">User doesn&#x27;t have editing rights (not the inspection author)</response>
        /// <response code="404">Patient not found</response>
        /// <response code="500">InternalServerError</response>
        [HttpPut]
        [Route("/api/inspection/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiInspectionIdPut")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiInspectionIdPut([FromRoute][Required] Guid id, [FromBody] InspectionEditModel body)
        {
            try
            {
                await inspectionService.EditInspection(id, body);
                return Ok();
            }
            catch (UnauthorizedAccessException e)
            {
                return StatusCode(401, "Unauthorized");
            }
            catch (Exception e)
            {
                return StatusCode(500, $"Server at fault\n {e.Message}");

            }
        }
    }
}

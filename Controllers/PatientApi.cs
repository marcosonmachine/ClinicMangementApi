/*
 * MIS.Back
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using ApiProject.Attributes;
using ApiProject.Security;
using Microsoft.AspNetCore.Authorization;
using ApiProject.Models;
using ApiProject.Data;
using ApiProject.Services;

namespace ApiProject.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PatientApiController(PatientService patientService) : ControllerBase
    {
        /// <summary>
        /// Get patients list
        /// </summary>
        /// <param name="name">part of the name for filtering</param>
        /// <param name="conclusions">conclusion list to filter by conclusions</param>
        /// <param name="sorting">option to sort patients</param>
        /// <param name="scheduledVisits">show only scheduled visits</param>
        /// <param name="onlyMine">show inspections done by this doctor</param>
        /// <param name="page">page number</param>
        /// <param name="size">required number of elements per page</param>
        /// <response code="200">Patients paged list retrieved</response>
        /// <response code="400">Invalid arguments for filtration/pagination/sorting</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="500">InternalServerError</response>
        [HttpGet]
        [Route("/api/patient")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPatientGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(PatientPagedListModel), description: "Patients paged list retrieved")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiPatientGet([FromQuery][MaxLength(255)] string name, [FromQuery] List<Conclusion> conclusions, [FromQuery] PatientSorting sorting, [FromQuery] bool? scheduledVisits, [FromQuery] bool? onlyMine, [FromQuery][Range(1, 2147483647)] int? page, [FromQuery][Range(1, 2147483647)] int? size)
        {
            try
            {
                PatientPagedListModel pList = await patientService.GetPatientsList(name, conclusions, sorting, scheduledVisits, onlyMine, page, size);
                return Ok(pList);
            }
            catch (Exception e)
            {
                return StatusCode(500, e.Message);
            }
        }

        /// <summary>
        /// Get patient card
        /// </summary>
        /// <param name="id">Patient&#x27;s identifier</param>
        /// <response code="200">Success</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">InternalServerError</response>
        [HttpGet]
        [Route("/api/patient/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPatientIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(PatientModel), description: "Success")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiPatientIdGet([FromRoute][Required] Guid? id)
        {
            PatientModel? patient = await patientService.GetPatientById(id ?? Guid.Empty);
            if (patient == null)
            {
                return StatusCode(500, "Server at fault");
            }
            return Ok(patient);
        }

        /// <summary>
        /// Get a list of patient medical inspections
        /// </summary>
        /// <param name="id">Patient&#x27;s identifier</param>
        /// <param name="grouped">flag - whether grouping by inspection chain is required - for filtration</param>
        /// <param name="icdRoots">root elements for ICD-10  - for filtration</param>
        /// <param name="page">page number</param>
        /// <param name="size">required number of elements per page</param>
        /// <response code="200">Patients inspections list retrieved</response>
        /// <response code="400">Invalid arguments for filtration/pagination</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Patient not found</response>
        /// <response code="500">InternalServerError</response>
        [HttpGet]
        [Route("/api/patient/{id}/inspections")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPatientIdInspectionsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InspectionPagedListModel), description: "Patients inspections list retrieved")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiPatientIdInspectionsGet
        (
            [FromRoute][Required] Guid? id,
            [FromQuery] bool? grouped,
            [FromQuery] List<Guid?> icdRoots,
            [FromQuery][Range(1, 2147483647)] int? page,
            [FromQuery][Range(1, 2147483647)] int? size
        )
        {
            int currentPage = page ?? 1;
            int pageSize = size ?? 5;
            try
            {
                var pageList = await patientService.GetPatientInspections(id ?? Guid.Empty, grouped ?? false, currentPage, pageSize);
                return Ok(pageList);
            }
            catch (Exception e)
            {
                return StatusCode(500, e.Message);
            }
        }

        /// <summary>
        /// Create inspection for specified patient
        /// </summary>
        /// <param name="id">Patient&#x27;s identifier</param>
        /// <param name="body">Inspection model</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="500">InternalServerError</response>
        [HttpPost]
        [Route("/api/patient/{id}/inspections")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPatientIdInspectionsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Guid?), description: "Success")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiPatientIdInspectionsPost([FromRoute][Required] Guid id, [FromBody] InspectionCreateModel body)
        {
            try
            {
                var inspectionId = await patientService.CreatePatientInspection(id, body);
                return Ok(inspectionId);
            }
            catch (Exception e)
            {
                return StatusCode(500, $"Error: {e.Message}");
            }
        }

        /// <summary>
        /// Search for patient medical inspections without child inspections
        /// </summary>
        /// <param name="id">Patient&#x27;s identifier</param>
        /// <param name="request">part of the diagnosis name or code</param>
        /// <response code="200">Patients inspections list retrieved</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Patient not found</response>
        /// <response code="500">InternalServerError</response>
        [HttpGet]
        [Route("/api/patient/{id}/inspections/search")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPatientIdInspectionsSearchGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<InspectionShortModel>), description: "Patients inspections list retrieved")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiPatientIdInspectionsSearchGet([FromRoute][Required] Guid id, [FromQuery][MaxLength(255)] string request)
        {
            try
            {
                var shortList = patientService.GetShortInspectionsList(id, request);
                return Ok(shortList);
            }
            catch (Exception e)
            {
                return StatusCode(500, "Server at fault");
            }
        }

        /// <summary>
        /// Create new patient
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Patient was registered</response>
        /// <response code="400">Invalid arguments</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="500">InternalServerError</response>
        [HttpPost]
        [Route("/api/patient")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPatientPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Guid?), description: "Patient was registered")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiPatientPost([FromBody] PatientCreateModel body)
        {
            Guid? id = await patientService.CreatePatient(body);
            if (id == Guid.Empty)
            {
                return StatusCode(500, "Server at fault");
            }
            return Ok(id);
        }
    }
}

/*
 * MIS.Back
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using ApiProject.Attributes;
using ApiProject.Security;
using Microsoft.AspNetCore.Authorization;
using ApiProject.Models;
using ApiProject.Services;
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using System.Data;

namespace ApiProject.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ConsultationApiController(ConsultationService consultationService, IMapper mapper) : ControllerBase
    {
        /// <summary>
        /// Edit comment
        /// </summary>
        /// <param name="id">Comment&#x27;s identifier</param>
        /// <param name="body">Comment model</param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid arguments</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">User is not the author of the comment</response>
        /// <response code="404">Comment not found</response>
        /// <response code="500">InternalServerError</response>
        [HttpPut]
        [Route("/api/consultation/comment/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiConsultationCommentIdPut")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiConsultationCommentIdPut([FromRoute][Required] Guid id, [FromBody] InspectionCommentCreateModel body)
        {
            try
            {
                await consultationService.EditComment(id, body);
                return Ok();
            }
            catch(DataException e)
            {
                return StatusCode(404, "comment not found");
            }
            catch(UnauthorizedAccessException e)
            {
                return StatusCode(403, "User is not the author of the comment");
            }
            catch(Exception e)
            {
                return StatusCode(500, "Server at fault");
            }
        }

        /// <summary>
        /// Get a list of medical inspections for consultation
        /// </summary>
        /// <param name="grouped">flag - whether grouping by inspection chain is required - for filtration</param>
        /// <param name="icdRoots">root elements for ICD-10  - for filtration</param>
        /// <param name="page">page number</param>
        /// <param name="size">required number of elements per page</param>
        /// <response code="200">Inspections for consultation list retrieved</response>
        /// <response code="400">Invalid arguments for filtration/pagination</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">InternalServerError</response>
        [HttpGet]
        [Route("/api/consultation")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiConsultationGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InspectionPagedListModel), description: "Inspections for consultation list retrieved")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiConsultationGet([FromQuery] bool? grouped, [FromQuery] List<Guid?> icdRoots, [FromQuery][Range(1, 2147483647)] int? page, [FromQuery][Range(1, 2147483647)] int? size)
        {
            try
            {
                InspectionPagedListModel pList = await consultationService.GetPatientInspections(
                    grouped ?? false,
                    page ?? 1,
                    size ?? 5
                );
                return Ok(pList);
            }
            catch (Exception e)
            {
                return StatusCode(500, "Server at fault");
            }
        }

        /// <summary>
        /// Add comment to concrete consultation
        /// </summary>
        /// <param name="id">Consultation&#x27;s identifier</param>
        /// <param name="body">Comment model</param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid arguments</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">User doesn&#x27;t have add comment to consultation (unsuitable specialty and not the inspection author)</response>
        /// <response code="404">Consultation or parent comment not found</response>
        /// <response code="500">InternalServerError</response>
        [HttpPost]
        [Route("/api/consultation/{id}/comment")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiConsultationIdCommentPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Guid?), description: "Success")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiConsultationIdCommentPost([FromRoute][Required] Guid id, [FromBody] CommentCreateModel body)
        {
            try
            {
                return Ok(await consultationService.AddCommentToConsulation(id, body));
            }
            catch (Exception e)
            {
                return StatusCode(500, "Server at fault");
            }
        }

        /// <summary>
        /// Get concrete consultation
        /// </summary>
        /// <param name="id">Consultation&#x27;s identifier</param>
        /// <response code="200">Success</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">InternalServerError</response>
        [HttpGet]
        [Route("/api/consultation/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiConsultationIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConsultationModel), description: "Success")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiConsultationIdGet([FromRoute][Required] Guid id)
        {
            try
            {
                ConsultationModel cml = await consultationService.GetConsultations(id);
                return Ok(cml);
            }
            catch (Exception e)
            {
                return StatusCode(500, e.Message);
            }
        }
    }
}

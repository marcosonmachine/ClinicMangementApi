/*
 * MIS.Back
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using ApiProject.Attributes;
using ApiProject.Security;
using Microsoft.AspNetCore.Authorization;
using ApiProject.Models;
using ApiProject.Services;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;
using ApiProject.Services.JWT;
using System.Reflection.Metadata;
using ApiProject.Managers;
using Microsoft.IdentityModel.Tokens;

namespace ApiProject.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DoctorApiController(IDoctorService doctorService, IBlackListService blackListService) : ControllerBase
    {
        /// <summary>
        /// Log in to the system
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Doctor was registered</response>
        /// <response code="400">Invalid arguments</response>
        /// <response code="500">InternalServerError</response>
        [HttpPost]
        [Route("/api/doctor/login")]
        [ValidateModelState]
        [SwaggerOperation("ApiDoctorLoginPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(TokenResponseModel), description: "Doctor was registered")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiDoctorLoginPost([FromBody] LoginCredentialsModel body)
        {
            string token = await doctorService.LoginAuthenticateUser(body);
            if (token.IsNullOrEmpty())
            {
                return Unauthorized("Invalid credentials");
            }

            return Ok(new TokenResponseModel { Token = token });
        }

        /// <summary>
        /// Log out system user
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="500">InternalServerError</response>
        [HttpPost]
        [Route("/api/doctor/logout")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiDoctorLogoutPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseModel), description: "Success")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual IActionResult ApiDoctorLogoutPost()
        {
            try
            {
                blackListService.AddToBlacklist(HttpContext.User.FindFirst("jti").Value);
                return Ok();
            }
            catch (Exception e)
            {
                return StatusCode(500, $"{e.Message}");
            }
        }

        /// <summary>
        /// Get user profile
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">InternalServerError</response>
        [HttpGet]
        [Route("/api/doctor/profile")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiDoctorProfileGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(DoctorModel), description: "Success")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual IActionResult ApiDoctorProfileGet()
        {
            Guid userId = Guid.Parse(HttpContext.User.FindFirst("UserId").Value);
            try
            {
                return Ok(doctorService.FindByIdNoTracking(userId).ToJson());
            }
            catch (Exception e)
            {
                return StatusCode(500, $"{e.Message}");
            }
        }

        /// <summary>
        /// Edit user Profile
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">InternalServerError</response>
        [HttpPut]
        [Route("/api/doctor/profile")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiDoctorProfilePut")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiDoctorProfilePut([FromBody] DoctorEditModel body)
        {
            Guid userId = Guid.Parse(HttpContext.User.FindFirst("UserId").Value);
            try
            {
                await doctorService.Edit(userId, body);
                return Ok();
            }
            catch (Exception e)
            {
                return StatusCode(500, $"{e.Message}");
            }
        }

        /// <summary>
        /// Register new user
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Doctor was registered</response>
        /// <response code="400">Invalid arguments</response>
        /// <response code="500">InternalServerError</response>
        [HttpPost]
        [Route("/api/doctor/register")]
        [ValidateModelState]
        [SwaggerOperation("ApiDoctorRegisterPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(TokenResponseModel), description: "Doctor was registered")]
        [SwaggerResponse(statusCode: 500, type: typeof(ResponseModel), description: "InternalServerError")]
        public virtual async Task<IActionResult> ApiDoctorRegisterPost([FromBody] DoctorRegisterModel body)
        {
            //Hash 
            body.Password = PasswordHasher.HashPassword(body.Password);

            TokenResponseModel res = await doctorService.Register(body);
            return new JsonResult(res);
        }
    }
}

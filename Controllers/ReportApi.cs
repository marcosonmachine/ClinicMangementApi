/*
 * MIS.Back
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using ApiProject.Attributes;
using ApiProject.Security;
using Microsoft.AspNetCore.Authorization;
using ApiProject.Models;

namespace ApiProject.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ReportApiController : ControllerBase
    {
        /// <summary>
        /// Get a report on patients&#x27; visits based on ICD-10 roots for a specified time interval
        /// </summary>
        /// <param name="start">Start of tome interval</param>
        /// <param name="end">End of time interval</param>
        /// <param name="icdRoots">Set of ICD-10 roots. All possible roots if null</param>
        /// <response code="200">Report extracted successfully</response>
        /// <response code="400">Some fields in request are invalid</response>
        /// <response code="401">No authentication data in request</response>
        /// <response code="403">Access to report is forbidden for user</response>
        /// <response code="500">Server error</response>
        [HttpGet]
        [Route("/api/report/icdrootsreport")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiReportIcdrootsreportGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(IcdRootsReportModel), description: "Report extracted successfully")]
        public virtual IActionResult ApiReportIcdrootsreportGet([FromQuery][Required()] DateTime? start, [FromQuery][Required()] DateTime? end, [FromQuery] List<Guid?> icdRoots)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IcdRootsReportModel));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"records\" : [ {\n    \"patientName\" : \"patientName\",\n    \"visitsByRoot\" : {\n      \"key\" : 0\n    },\n    \"gender\" : \"Male\",\n    \"patientBirthdate\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"patientName\" : \"patientName\",\n    \"visitsByRoot\" : {\n      \"key\" : 0\n    },\n    \"gender\" : \"Male\",\n    \"patientBirthdate\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"summaryByRoot\" : {\n    \"key\" : 6\n  },\n  \"filters\" : {\n    \"icdRoots\" : [ \"icdRoots\", \"icdRoots\" ],\n    \"start\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"end\" : \"2000-01-23T04:56:07.000+00:00\"\n  }\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<IcdRootsReportModel>(exampleJson)
            : default(IcdRootsReportModel);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
